//	====================================================================
//	This file was generated by LEBuilder
//	http://leadwerks.com/werkspace
//	====================================================================

#include "engine.h"
#include "control.h"
#include "generator.h"
#include <iostream>
#include <string>

const int 	ScreenWidth = 1280;
const int 	ScreenHeight = 800;
const char* MediaDir =  "D:/Leadwerks25";
const char* AppTitle = "dungeon";

void ErrOut( const std::string& message ) { std::cerr << message << std::endl; }

//	-------------------------------
int main( int argn, char* argv[] )
{
	srand (time(NULL));
	if( !Initialize() )
		return 1;        
	
	// Set graphics mode        
	if( !Graphics(ScreenWidth,ScreenHeight) )
	{                
		ErrOut( "Failed to set graphics mode."  );
		return 1;        
	}
	SetAppTitle( AppTitle ) ;
	RegisterAbstractPath( MediaDir ); 
	
	// Create framework object and set it to a global object so other scripts can access it
	TFramework fw = CreateFramework();        
	if( fw == NULL )        
	{
		ErrOut( "Failed to initialize engine." );                
		return 1;        
	}        
	 
	AFilter(16);
	TFilter(1);

	// Get framework main camera        
	TCamera camera = GetLayerCamera( GetFrameworkLayer(0) );        
	PositionEntity( camera, Vec3(0,0,-2) );
	Control kontrolli;
	kontrolli.SpawnControl(&camera);
	
	// Create cube
	TMaterial material = LoadMaterial( "abstract::concrete.mat" );        
	
	// Create ground
	TMesh ground = CreateCube();        
	ScaleEntity( ground, Vec3(110,0.1,110) );        
	PositionEntity( ground, Vec3(50,-0.55,50) );              
	
	// Add some light
	TLight light = CreateDirectionalLight();        
	RotateEntity( light, Vec3(45,45,45) );        
	
	Generator grid;
	grid.initialize();
	//grid.generateDungeon();
	int round = 0;
	// Main loop
	while( !KeyHit() && !AppTerminate() )        
	{                
		if( !AppSuspended() )
		{
			kontrolli.CameraControl();

			if(KeyDown(KEY_1))
				grid.generateDungeon();
			if(KeyHit(KEY_2)){
				grid.clearDungeon();
				grid.success = false;
			}
			if(grid.success == false)
				if(round > 500){
					grid.clearDungeon();
					round = 0;
				}
				else
					for(int i=0; i<=1; i++){
						grid.generateDungeon();
						round++;
					}
			
			if(KeyHit(KEY_4)){
				grid.setComplexity(true);
			}
			if(KeyHit(KEY_3)){
				grid.setComplexity(false);
			}

			UpdateFramework();
			RenderFramework();

			grid.debugDeadendSet();
			DrawText(30, 500, "complexity:%i last:%i,%i lastbin:%i set_size:%i", grid.complexity, grid.dbgx, grid.dbgy, grid.dbgbin, grid.dbgsize);
			Flip( 0 );
		}
	}                
	
	return Terminate();
}
